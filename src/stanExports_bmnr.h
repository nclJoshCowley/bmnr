// Generated by rstantools.  Do not edit by hand.

/*
    bmnr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bmnr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bmnr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_bmnr_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 128, column 2 to column 24)",
                                                      " (in 'string', line 129, column 2 to column 26)",
                                                      " (in 'string', line 130, column 2 to column 30)",
                                                      " (in 'string', line 133, column 9 to column 12)",
                                                      " (in 'string', line 133, column 14 to column 17)",
                                                      " (in 'string', line 133, column 2 to column 27)",
                                                      " (in 'string', line 134, column 9 to column 12)",
                                                      " (in 'string', line 134, column 14 to column 17)",
                                                      " (in 'string', line 134, column 2 to column 29)",
                                                      " (in 'string', line 136, column 2 to line 138, column 44)",
                                                      " (in 'string', line 139, column 2 to column 42)",
                                                      " (in 'string', line 141, column 20 to column 64)",
                                                      " (in 'string', line 141, column 2 to column 64)",
                                                      " (in 'string', line 142, column 2 to column 51)",
                                                      " (in 'string', line 143, column 2 to column 53)",
                                                      " (in 'string', line 145, column 2 to column 63)",
                                                      " (in 'string', line 106, column 2 to column 19)",
                                                      " (in 'string', line 107, column 2 to column 19)",
                                                      " (in 'string', line 108, column 2 to column 19)",
                                                      " (in 'string', line 109, column 2 to column 25)",
                                                      " (in 'string', line 111, column 9 to column 12)",
                                                      " (in 'string', line 111, column 14 to column 17)",
                                                      " (in 'string', line 111, column 2 to column 21)",
                                                      " (in 'string', line 112, column 9 to column 12)",
                                                      " (in 'string', line 112, column 14 to column 17)",
                                                      " (in 'string', line 112, column 2 to column 21)",
                                                      " (in 'string', line 113, column 27 to column 30)",
                                                      " (in 'string', line 113, column 9 to column 18)",
                                                      " (in 'string', line 113, column 2 to column 32)",
                                                      " (in 'string', line 115, column 2 to column 26)",
                                                      " (in 'string', line 116, column 2 to column 27)",
                                                      " (in 'string', line 117, column 13 to column 16)",
                                                      " (in 'string', line 117, column 2 to column 32)",
                                                      " (in 'string', line 119, column 2 to column 32)",
                                                      " (in 'string', line 120, column 2 to column 31)",
                                                      " (in 'string', line 124, column 2 to column 29)",
                                                      " (in 'string', line 125, column 2 to column 33)",
                                                      " (in 'string', line 128, column 9 to column 12)",
                                                      " (in 'string', line 128, column 14 to column 17)",
                                                      " (in 'string', line 129, column 13 to column 16)",
                                                      " (in 'string', line 130, column 9 to column 18)",
                                                      " (in 'string', line 14, column 4 to column 12)",
                                                      " (in 'string', line 15, column 11 to column 18)",
                                                      " (in 'string', line 15, column 20 to column 27)",
                                                      " (in 'string', line 15, column 4 to column 46)",
                                                      " (in 'string', line 16, column 4 to column 22)",
                                                      " (in 'string', line 17, column 4 to column 22)",
                                                      " (in 'string', line 21, column 4 to column 67)",
                                                      " (in 'string', line 23, column 4 to line 31, column 78)",
                                                      " (in 'string', line 41, column 4 to column 14)",
                                                      " (in 'string', line 13, column 96 to line 42, column 1)",
                                                      " (in 'string', line 54, column 4 to column 24)",
                                                      " (in 'string', line 55, column 4 to column 24)",
                                                      " (in 'string', line 56, column 11 to column 14)",
                                                      " (in 'string', line 56, column 16 to column 19)",
                                                      " (in 'string', line 56, column 4 to column 25)",
                                                      " (in 'string', line 58, column 4 to column 40)",
                                                      " (in 'string', line 59, column 4 to column 14)",
                                                      " (in 'string', line 63, column 8 to column 64)",
                                                      " (in 'string', line 64, column 8 to line 65, column 72)",
                                                      " (in 'string', line 62, column 24 to line 66, column 7)",
                                                      " (in 'string', line 62, column 6 to line 66, column 7)",
                                                      " (in 'string', line 61, column 22 to line 67, column 5)",
                                                      " (in 'string', line 61, column 4 to line 67, column 5)",
                                                      " (in 'string', line 69, column 4 to column 15)",
                                                      " (in 'string', line 53, column 96 to line 70, column 1)",
                                                      " (in 'string', line 83, column 4 to column 22)",
                                                      " (in 'string', line 84, column 11 to column 14)",
                                                      " (in 'string', line 84, column 16 to column 19)",
                                                      " (in 'string', line 84, column 4 to column 25)",
                                                      " (in 'string', line 86, column 4 to column 40)",
                                                      " (in 'string', line 87, column 4 to column 14)",
                                                      " (in 'string', line 90, column 6 to column 30)",
                                                      " (in 'string', line 93, column 8 to column 58)",
                                                      " (in 'string', line 94, column 8 to column 82)",
                                                      " (in 'string', line 95, column 8 to column 30)",
                                                      " (in 'string', line 92, column 29 to line 96, column 7)",
                                                      " (in 'string', line 92, column 6 to line 96, column 7)",
                                                      " (in 'string', line 89, column 27 to line 97, column 5)",
                                                      " (in 'string', line 89, column 4 to line 97, column 5)",
                                                      " (in 'string', line 99, column 4 to column 32)",
                                                      " (in 'string', line 101, column 4 to column 15)",
                                                      " (in 'string', line 82, column 72 to line 102, column 1)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
matrix_normal_halfcholesky_lpdf(const T0__& y_arg__,
                                const T1__& y_mean_arg__,
                                const T2__& L_covar_s_arg__,
                                const T3__& covar_y_arg__,
                                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& y = to_ref(y_arg__);
  const auto& y_mean = to_ref(y_mean_arg__);
  const auto& L_covar_s = to_ref(L_covar_s_arg__);
  const auto& covar_y = to_ref(covar_y_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lp;
    lp = DUMMY_VAR__;
    
    current_statement__ = 43;
    validate_non_negative_index("mahalanobis_dist", "rows(y)", rows(y));
    current_statement__ = 44;
    validate_non_negative_index("mahalanobis_dist", "cols(y)", cols(y));
    Eigen::Matrix<local_scalar_t__, -1, -1> mahalanobis_dist;
    mahalanobis_dist = Eigen::Matrix<local_scalar_t__, -1, -1>(rows(y), 
      cols(y));
    stan::math::fill(mahalanobis_dist, DUMMY_VAR__);
    
    int n_s;
    n_s = std::numeric_limits<int>::min();
    
    current_statement__ = 46;
    n_s = rows(y);
    int n_y;
    n_y = std::numeric_limits<int>::min();
    
    current_statement__ = 47;
    n_y = cols(y);
    current_statement__ = 48;
    assign(mahalanobis_dist, nil_index_list(),
      mdivide_left_tri_low(L_covar_s, subtract(y, y_mean)),
      "assigning variable mahalanobis_dist");
    current_statement__ = 49;
    lp = (((-(((0.5 * n_s) * n_y) * stan::math::log((2 * stan::math::pi())))
             - ((0.5 * n_s) * log_determinant(covar_y))) -
            (n_y * sum(stan::math::log(diagonal(L_covar_s))))) -
           (0.5 *
             trace(mdivide_left_spd(covar_y, crossprod(mahalanobis_dist)))));
    current_statement__ = 50;
    return lp;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct matrix_normal_halfcholesky_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>
operator()(const T0__& y, const T1__& y_mean, const T2__& L_covar_s,
           const T3__& covar_y, std::ostream* pstream__)  const 
{
return matrix_normal_halfcholesky_lpdf<propto__>(y, y_mean, L_covar_s,
         covar_y, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
stan::value_type_t<T3__>>, -1, -1>
gp_matern32_cov_ard_general(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x_r,
                            const std::vector<Eigen::Matrix<T1__, -1, 1>>& x_c,
                            const T2__& gp_scale,
                            const T3__& gp_length_arg__,
                            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          stan::value_type_t<T3__>>;
  const auto& gp_length = to_ref(gp_length_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_r;
    n_r = std::numeric_limits<int>::min();
    
    current_statement__ = 52;
    n_r = stan::math::size(x_r);
    int n_c;
    n_c = std::numeric_limits<int>::min();
    
    current_statement__ = 53;
    n_c = stan::math::size(x_c);
    current_statement__ = 54;
    validate_non_negative_index("out", "n_r", n_r);
    current_statement__ = 55;
    validate_non_negative_index("out", "n_c", n_c);
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(n_r, n_c);
    stan::math::fill(out, DUMMY_VAR__);
    
    local_scalar_t__ gp_scale_sq;
    gp_scale_sq = DUMMY_VAR__;
    
    current_statement__ = 57;
    gp_scale_sq = pow(gp_scale, 2);
    local_scalar_t__ dist;
    dist = DUMMY_VAR__;
    
    current_statement__ = 64;
    for (int ir = 1; ir <= n_r; ++ir) {
      current_statement__ = 62;
      for (int ic = 1; ic <= n_c; ++ic) {
        current_statement__ = 59;
        dist = stan::math::sqrt(
                 dot_self(
                   elt_divide(subtract(x_r[(ir - 1)], x_c[(ic - 1)]),
                     gp_length)));
        current_statement__ = 60;
        assign(out,
          cons_list(index_uni(ir),
            cons_list(index_uni(ic), nil_index_list())),
          ((gp_scale_sq * (1 + (stan::math::sqrt(3) * dist))) *
            stan::math::exp(((-1 * stan::math::sqrt(3)) * dist))),
          "assigning variable out");}}
    current_statement__ = 65;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gp_matern32_cov_ard_general_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
stan::value_type_t<T3__>>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x_r,
           const std::vector<Eigen::Matrix<T1__, -1, 1>>& x_c,
           const T2__& gp_scale, const T3__& gp_length,
           std::ostream* pstream__)  const 
{
return gp_matern32_cov_ard_general(x_r, x_c, gp_scale, gp_length, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>, -1, -1>
gp_matern32_cov_ard(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x,
                    const T1__& gp_scale, const T2__& gp_length_arg__,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>>;
  const auto& gp_length = to_ref(gp_length_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_r;
    n_r = std::numeric_limits<int>::min();
    
    current_statement__ = 67;
    n_r = stan::math::size(x);
    current_statement__ = 68;
    validate_non_negative_index("out", "n_r", n_r);
    current_statement__ = 69;
    validate_non_negative_index("out", "n_r", n_r);
    Eigen::Matrix<local_scalar_t__, -1, -1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, -1>(n_r, n_r);
    stan::math::fill(out, DUMMY_VAR__);
    
    local_scalar_t__ gp_scale_sq;
    gp_scale_sq = DUMMY_VAR__;
    
    current_statement__ = 71;
    gp_scale_sq = pow(gp_scale, 2);
    local_scalar_t__ dist;
    dist = DUMMY_VAR__;
    
    current_statement__ = 80;
    for (int i = 1; i <= (n_r - 1); ++i) {
      current_statement__ = 73;
      assign(out,
        cons_list(index_uni(i), cons_list(index_uni(i), nil_index_list())),
        gp_scale_sq, "assigning variable out");
      current_statement__ = 78;
      for (int j = (i + 1); j <= n_r; ++j) {
        current_statement__ = 74;
        dist = stan::math::sqrt(
                 dot_self(
                   elt_divide(subtract(x[(i - 1)], x[(j - 1)]), gp_length)));
        current_statement__ = 75;
        assign(out,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          ((gp_scale_sq * (1 + (stan::math::sqrt(3) * dist))) *
            stan::math::exp(((-1 * stan::math::sqrt(3)) * dist))),
          "assigning variable out");
        current_statement__ = 76;
        assign(out,
          cons_list(index_uni(j), cons_list(index_uni(i), nil_index_list())),
          rvalue(out,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())), "out"),
          "assigning variable out");}}
    current_statement__ = 81;
    assign(out,
      cons_list(index_uni(n_r), cons_list(index_uni(n_r), nil_index_list())),
      gp_scale_sq, "assigning variable out");
    current_statement__ = 82;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gp_matern32_cov_ard_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x,
           const T1__& gp_scale, const T2__& gp_length,
           std::ostream* pstream__)  const 
{
return gp_matern32_cov_ard(x, gp_scale, gp_length, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_bmnr final : public model_base_crtp<model_bmnr> {
private:
  int n_s;
  int n_y;
  int n_x;
  int n_gp_dims;
  Eigen::Matrix<double, -1, -1> y;
  Eigen::Matrix<double, -1, -1> x;
  std::vector<Eigen::Matrix<double, -1, 1>> coords;
  double regr_prec;
  double covar_y_df;
  Eigen::Matrix<double, -1, -1> covar_y_scale;
  double gp_length_shape;
  double gp_length_rate;
  double gp_scale;
  double gp_nugget;
 
public:
  ~model_bmnr() { }
  
  inline std::string model_name() const final { return "model_bmnr"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_bmnr(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_bmnr_namespace::model_bmnr";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","n_s","int",
          context__.to_vec());
      n_s = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      n_s = context__.vals_i("n_s")[(1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "n_s", n_s, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization","n_y","int",
          context__.to_vec());
      n_y = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      n_y = context__.vals_i("n_y")[(1 - 1)];
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "n_y", n_y, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization","n_x","int",
          context__.to_vec());
      n_x = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      n_x = context__.vals_i("n_x")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "n_x", n_x, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","n_gp_dims","int",
          context__.to_vec());
      n_gp_dims = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      n_gp_dims = context__.vals_i("n_gp_dims")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "n_gp_dims", n_gp_dims, 1);
      current_statement__ = 21;
      validate_non_negative_index("y", "n_s", n_s);
      current_statement__ = 22;
      validate_non_negative_index("y", "n_y", n_y);
      current_statement__ = 23;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n_s, n_y));
      y = Eigen::Matrix<double, -1, -1>(n_s, n_y);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 23;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= n_s; ++sym2__) {
            current_statement__ = 23;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 23;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 24;
      validate_non_negative_index("x", "n_s", n_s);
      current_statement__ = 25;
      validate_non_negative_index("x", "n_x", n_x);
      current_statement__ = 26;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(n_s, n_x));
      x = Eigen::Matrix<double, -1, -1>(n_s, n_x);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 26;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= n_x; ++sym1__) {
          current_statement__ = 26;
          for (int sym2__ = 1; sym2__ <= n_s; ++sym2__) {
            current_statement__ = 26;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 26;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 27;
      validate_non_negative_index("coords", "n_s", n_s);
      current_statement__ = 28;
      validate_non_negative_index("coords", "n_gp_dims", n_gp_dims);
      current_statement__ = 29;
      context__.validate_dims("data initialization","coords","double",
          context__.to_vec(n_s, n_gp_dims));
      coords = std::vector<Eigen::Matrix<double, -1, 1>>(n_s, Eigen::Matrix<double, -1, 1>(n_gp_dims));
      stan::math::fill(coords, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> coords_flat__;
        current_statement__ = 29;
        assign(coords_flat__, nil_index_list(), context__.vals_r("coords"),
          "assigning variable coords_flat__");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
          current_statement__ = 29;
          for (int sym2__ = 1; sym2__ <= n_s; ++sym2__) {
            current_statement__ = 29;
            assign(coords,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              coords_flat__[(pos__ - 1)], "assigning variable coords");
            current_statement__ = 29;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 30;
      context__.validate_dims("data initialization","regr_prec","double",
          context__.to_vec());
      regr_prec = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 30;
      regr_prec = context__.vals_r("regr_prec")[(1 - 1)];
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "regr_prec", regr_prec, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","covar_y_df","double",
          context__.to_vec());
      covar_y_df = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 31;
      covar_y_df = context__.vals_r("covar_y_df")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "covar_y_df", covar_y_df, 0);
      current_statement__ = 32;
      validate_non_negative_index("covar_y_scale", "n_y", n_y);
      current_statement__ = 32;
      validate_non_negative_index("covar_y_scale", "n_y", n_y);
      current_statement__ = 33;
      context__.validate_dims("data initialization","covar_y_scale","double",
          context__.to_vec(n_y, n_y));
      covar_y_scale = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y_scale, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> covar_y_scale_flat__;
        current_statement__ = 33;
        assign(covar_y_scale_flat__, nil_index_list(),
          context__.vals_r("covar_y_scale"),
          "assigning variable covar_y_scale_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
            current_statement__ = 33;
            assign(covar_y_scale,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              covar_y_scale_flat__[(pos__ - 1)],
              "assigning variable covar_y_scale");
            current_statement__ = 33;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 33;
      current_statement__ = 33;
      check_cov_matrix(function__, "covar_y_scale", covar_y_scale);
      current_statement__ = 34;
      context__.validate_dims("data initialization","gp_length_shape",
          "double",context__.to_vec());
      gp_length_shape = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      gp_length_shape = context__.vals_r("gp_length_shape")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "gp_length_shape", gp_length_shape,
                             0);
      current_statement__ = 35;
      context__.validate_dims("data initialization","gp_length_rate",
          "double",context__.to_vec());
      gp_length_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      gp_length_rate = context__.vals_r("gp_length_rate")[(1 - 1)];
      current_statement__ = 35;
      current_statement__ = 35;
      check_greater_or_equal(function__, "gp_length_rate", gp_length_rate, 0);
      current_statement__ = 36;
      gp_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      gp_scale = 1;
      current_statement__ = 37;
      gp_nugget = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      gp_nugget = 1e-8;
      current_statement__ = 36;
      current_statement__ = 36;
      check_greater_or_equal(function__, "gp_scale", gp_scale, 0);
      current_statement__ = 37;
      current_statement__ = 37;
      check_greater_or_equal(function__, "gp_nugget", gp_nugget, 0);
      current_statement__ = 38;
      validate_non_negative_index("regr", "n_x", n_x);
      current_statement__ = 39;
      validate_non_negative_index("regr", "n_y", n_y);
      current_statement__ = 40;
      validate_non_negative_index("covar_y", "n_y", n_y);
      current_statement__ = 40;
      validate_non_negative_index("covar_y", "n_y", n_y);
      current_statement__ = 41;
      validate_non_negative_index("gp_length", "n_gp_dims", n_gp_dims);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_x * n_y;
      num_params_r__ += (n_y + ((n_y * (n_y - 1)) / 2));
      num_params_r__ += n_gp_dims;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_bmnr_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> regr;
      regr = Eigen::Matrix<local_scalar_t__, -1, -1>(n_x, n_y);
      stan::math::fill(regr, DUMMY_VAR__);
      
      current_statement__ = 1;
      regr = in__.matrix(n_x, n_y);
      Eigen::Matrix<local_scalar_t__, -1, -1> covar_y;
      covar_y = Eigen::Matrix<local_scalar_t__, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> covar_y_in__;
      covar_y_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_y +
                                                              ((n_y *
                                                                 (n_y - 1)) /
                                                                2)));
      stan::math::fill(covar_y_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      covar_y_in__ = in__.vector((n_y + ((n_y * (n_y - 1)) / 2)));
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        assign(covar_y, nil_index_list(),
          stan::math::cov_matrix_constrain(covar_y_in__, n_y, lp__),
          "assigning variable covar_y");
      } else {
        current_statement__ = 2;
        assign(covar_y, nil_index_list(),
          stan::math::cov_matrix_constrain(covar_y_in__, n_y),
          "assigning variable covar_y");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> gp_length;
      gp_length = Eigen::Matrix<local_scalar_t__, -1, 1>(n_gp_dims);
      stan::math::fill(gp_length, DUMMY_VAR__);
      
      current_statement__ = 3;
      gp_length = in__.vector(n_gp_dims);
      {
        current_statement__ = 4;
        validate_non_negative_index("covar_s", "n_s", n_s);
        current_statement__ = 5;
        validate_non_negative_index("covar_s", "n_s", n_s);
        Eigen::Matrix<local_scalar_t__, -1, -1> covar_s;
        covar_s = Eigen::Matrix<local_scalar_t__, -1, -1>(n_s, n_s);
        stan::math::fill(covar_s, DUMMY_VAR__);
        
        current_statement__ = 7;
        validate_non_negative_index("L_covar_s", "n_s", n_s);
        current_statement__ = 8;
        validate_non_negative_index("L_covar_s", "n_s", n_s);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_covar_s;
        L_covar_s = Eigen::Matrix<local_scalar_t__, -1, -1>(n_s, n_s);
        stan::math::fill(L_covar_s, DUMMY_VAR__);
        
        current_statement__ = 10;
        assign(covar_s, nil_index_list(),
          add(gp_matern32_cov_ard(coords, gp_scale, gp_length, pstream__),
            diag_matrix(rep_vector(gp_nugget, n_s))),
          "assigning variable covar_s");
        current_statement__ = 11;
        assign(L_covar_s, nil_index_list(), cholesky_decompose(covar_s),
          "assigning variable L_covar_s");
        current_statement__ = 13;
        for (int yi = 1; yi <= n_y; ++yi) {
          current_statement__ = 12;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(regr,
                cons_list(index_omni(),
                  cons_list(index_uni(yi), nil_index_list())), "regr"), 0,
              (1 / stan::math::sqrt(regr_prec))));}
        current_statement__ = 14;
        lp_accum__.add(
          inv_wishart_lpdf<propto__>(covar_y, covar_y_df, covar_y_scale));
        current_statement__ = 15;
        lp_accum__.add(
          gamma_lpdf<propto__>(gp_length, gp_length_shape, gp_length_rate));
        current_statement__ = 16;
        lp_accum__.add(
          matrix_normal_halfcholesky_lpdf<propto__>(y, multiply(x, regr),
            L_covar_s, covar_y, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_bmnr_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> regr;
      regr = Eigen::Matrix<double, -1, -1>(n_x, n_y);
      stan::math::fill(regr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      regr = in__.matrix(n_x, n_y);
      Eigen::Matrix<double, -1, -1> covar_y;
      covar_y = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> covar_y_in__;
      covar_y_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_y +
                                                              ((n_y *
                                                                 (n_y - 1)) /
                                                                2)));
      stan::math::fill(covar_y_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      covar_y_in__ = in__.vector((n_y + ((n_y * (n_y - 1)) / 2)));
      current_statement__ = 2;
      assign(covar_y, nil_index_list(),
        stan::math::cov_matrix_constrain(covar_y_in__, n_y),
        "assigning variable covar_y");
      Eigen::Matrix<double, -1, 1> gp_length;
      gp_length = Eigen::Matrix<double, -1, 1>(n_gp_dims);
      stan::math::fill(gp_length, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      gp_length = in__.vector(n_gp_dims);
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          vars__.emplace_back(
            rvalue(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "regr"));}}
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
          vars__.emplace_back(
            rvalue(covar_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "covar_y"));
        }}
      for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
        vars__.emplace_back(gp_length[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> regr;
      regr = Eigen::Matrix<double, -1, -1>(n_x, n_y);
      stan::math::fill(regr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> regr_flat__;
        current_statement__ = 1;
        assign(regr_flat__, nil_index_list(), context__.vals_r("regr"),
          "assigning variable regr_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
            current_statement__ = 1;
            assign(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              regr_flat__[(pos__ - 1)], "assigning variable regr");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> covar_y;
      covar_y = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> covar_y_flat__;
        current_statement__ = 2;
        assign(covar_y_flat__, nil_index_list(), context__.vals_r("covar_y"),
          "assigning variable covar_y_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
            current_statement__ = 2;
            assign(covar_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              covar_y_flat__[(pos__ - 1)], "assigning variable covar_y");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> covar_y_free__;
      covar_y_free__ = Eigen::Matrix<double, -1, 1>((n_y +
                                                      ((n_y * (n_y - 1)) / 2)));
      stan::math::fill(covar_y_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(covar_y_free__, nil_index_list(),
        stan::math::cov_matrix_free(covar_y),
        "assigning variable covar_y_free__");
      Eigen::Matrix<double, -1, 1> gp_length;
      gp_length = Eigen::Matrix<double, -1, 1>(n_gp_dims);
      stan::math::fill(gp_length, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gp_length_flat__;
        current_statement__ = 3;
        assign(gp_length_flat__, nil_index_list(),
          context__.vals_r("gp_length"),
          "assigning variable gp_length_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
          current_statement__ = 3;
          assign(gp_length, cons_list(index_uni(sym1__), nil_index_list()),
            gp_length_flat__[(pos__ - 1)], "assigning variable gp_length");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          vars__.emplace_back(
            rvalue(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "regr"));}}
      for (int sym1__ = 1; sym1__ <= (n_y + ((n_y * (n_y - 1)) / 2));
           ++sym1__) { vars__.emplace_back(covar_y_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
        vars__.emplace_back(gp_length[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("regr");
    names__.emplace_back("covar_y");
    names__.emplace_back("gp_length");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_x),
                                             static_cast<size_t>(n_y)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_y),
                                             static_cast<size_t>(n_y)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_gp_dims)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "regr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "covar_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gp_length" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "regr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= (n_y + ((n_y * (n_y - 1)) / 2)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "covar_y" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_gp_dims; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gp_length" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"regr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_x << ",\"cols\":" << n_y << "},\"block\":\"parameters\"},{\"name\":\"covar_y\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_y << ",\"cols\":" << n_y << "},\"block\":\"parameters\"},{\"name\":\"gp_length\",\"type\":{\"name\":\"vector\",\"length\":" << n_gp_dims << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"regr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_x << ",\"cols\":" << n_y << "},\"block\":\"parameters\"},{\"name\":\"covar_y\",\"type\":{\"name\":\"vector\",\"length\":" << (n_y + ((n_y * (n_y - 1)) / 2)) << "},\"block\":\"parameters\"},{\"name\":\"gp_length\",\"type\":{\"name\":\"vector\",\"length\":" << n_gp_dims << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_bmnr_namespace::model_bmnr;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bmnr_namespace::profiles__;
}
#endif
#endif
