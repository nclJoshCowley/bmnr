// Generated by rstantools.  Do not edit by hand.

/*
    bmnr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bmnr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bmnr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_bmnr_mvnorm_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 15, column 2 to column 24)",
                                                      " (in 'string', line 16, column 2 to column 26)",
                                                      " (in 'string', line 19, column 9 to column 12)",
                                                      " (in 'string', line 19, column 14 to column 17)",
                                                      " (in 'string', line 19, column 2 to column 59)",
                                                      " (in 'string', line 20, column 9 to column 12)",
                                                      " (in 'string', line 20, column 14 to column 17)",
                                                      " (in 'string', line 20, column 2 to column 37)",
                                                      " (in 'string', line 22, column 20 to column 64)",
                                                      " (in 'string', line 22, column 2 to column 64)",
                                                      " (in 'string', line 23, column 2 to column 51)",
                                                      " (in 'string', line 25, column 20 to column 77)",
                                                      " (in 'string', line 25, column 2 to column 77)",
                                                      " (in 'string', line 3, column 2 to column 19)",
                                                      " (in 'string', line 4, column 2 to column 19)",
                                                      " (in 'string', line 5, column 2 to column 19)",
                                                      " (in 'string', line 7, column 9 to column 12)",
                                                      " (in 'string', line 7, column 14 to column 17)",
                                                      " (in 'string', line 7, column 2 to column 21)",
                                                      " (in 'string', line 8, column 9 to column 12)",
                                                      " (in 'string', line 8, column 14 to column 17)",
                                                      " (in 'string', line 8, column 2 to column 21)",
                                                      " (in 'string', line 10, column 2 to column 26)",
                                                      " (in 'string', line 11, column 2 to column 27)",
                                                      " (in 'string', line 12, column 13 to column 16)",
                                                      " (in 'string', line 12, column 2 to column 32)",
                                                      " (in 'string', line 15, column 9 to column 12)",
                                                      " (in 'string', line 15, column 14 to column 17)",
                                                      " (in 'string', line 16, column 13 to column 16)"};
#include <stan_meta_header.hpp>
class model_bmnr_mvnorm final : public model_base_crtp<model_bmnr_mvnorm> {
private:
  int n_s;
  int n_y;
  int n_x;
  Eigen::Matrix<double, -1, -1> y;
  Eigen::Matrix<double, -1, -1> x;
  double regr_prec;
  double covar_y_df;
  Eigen::Matrix<double, -1, -1> covar_y_scale;
 
public:
  ~model_bmnr_mvnorm() { }
  
  inline std::string model_name() const final { return "model_bmnr_mvnorm"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_bmnr_mvnorm(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_bmnr_mvnorm_namespace::model_bmnr_mvnorm";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","n_s","int",
          context__.to_vec());
      n_s = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      n_s = context__.vals_i("n_s")[(1 - 1)];
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "n_s", n_s, 1);
      current_statement__ = 15;
      context__.validate_dims("data initialization","n_y","int",
          context__.to_vec());
      n_y = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      n_y = context__.vals_i("n_y")[(1 - 1)];
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "n_y", n_y, 1);
      current_statement__ = 16;
      context__.validate_dims("data initialization","n_x","int",
          context__.to_vec());
      n_x = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      n_x = context__.vals_i("n_x")[(1 - 1)];
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "n_x", n_x, 1);
      current_statement__ = 17;
      validate_non_negative_index("y", "n_s", n_s);
      current_statement__ = 18;
      validate_non_negative_index("y", "n_y", n_y);
      current_statement__ = 19;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n_s, n_y));
      y = Eigen::Matrix<double, -1, -1>(n_s, n_y);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 19;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= n_s; ++sym2__) {
            current_statement__ = 19;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 19;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 20;
      validate_non_negative_index("x", "n_s", n_s);
      current_statement__ = 21;
      validate_non_negative_index("x", "n_x", n_x);
      current_statement__ = 22;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(n_s, n_x));
      x = Eigen::Matrix<double, -1, -1>(n_s, n_x);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 22;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= n_x; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= n_s; ++sym2__) {
            current_statement__ = 22;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 22;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 23;
      context__.validate_dims("data initialization","regr_prec","double",
          context__.to_vec());
      regr_prec = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      regr_prec = context__.vals_r("regr_prec")[(1 - 1)];
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "regr_prec", regr_prec, 0);
      current_statement__ = 24;
      context__.validate_dims("data initialization","covar_y_df","double",
          context__.to_vec());
      covar_y_df = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      covar_y_df = context__.vals_r("covar_y_df")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "covar_y_df", covar_y_df, 0);
      current_statement__ = 25;
      validate_non_negative_index("covar_y_scale", "n_y", n_y);
      current_statement__ = 25;
      validate_non_negative_index("covar_y_scale", "n_y", n_y);
      current_statement__ = 26;
      context__.validate_dims("data initialization","covar_y_scale","double",
          context__.to_vec(n_y, n_y));
      covar_y_scale = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y_scale, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> covar_y_scale_flat__;
        current_statement__ = 26;
        assign(covar_y_scale_flat__, nil_index_list(),
          context__.vals_r("covar_y_scale"),
          "assigning variable covar_y_scale_flat__");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 26;
          for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
            current_statement__ = 26;
            assign(covar_y_scale,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              covar_y_scale_flat__[(pos__ - 1)],
              "assigning variable covar_y_scale");
            current_statement__ = 26;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 26;
      current_statement__ = 26;
      check_cov_matrix(function__, "covar_y_scale", covar_y_scale);
      current_statement__ = 27;
      validate_non_negative_index("regr", "n_x", n_x);
      current_statement__ = 28;
      validate_non_negative_index("regr", "n_y", n_y);
      current_statement__ = 29;
      validate_non_negative_index("covar_y", "n_y", n_y);
      current_statement__ = 29;
      validate_non_negative_index("covar_y", "n_y", n_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += n_x * n_y;
      num_params_r__ += (n_y + ((n_y * (n_y - 1)) / 2));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_bmnr_mvnorm_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> regr;
      regr = Eigen::Matrix<local_scalar_t__, -1, -1>(n_x, n_y);
      stan::math::fill(regr, DUMMY_VAR__);
      
      current_statement__ = 1;
      regr = in__.matrix(n_x, n_y);
      Eigen::Matrix<local_scalar_t__, -1, -1> covar_y;
      covar_y = Eigen::Matrix<local_scalar_t__, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> covar_y_in__;
      covar_y_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_y +
                                                              ((n_y *
                                                                 (n_y - 1)) /
                                                                2)));
      stan::math::fill(covar_y_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      covar_y_in__ = in__.vector((n_y + ((n_y * (n_y - 1)) / 2)));
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        assign(covar_y, nil_index_list(),
          stan::math::cov_matrix_constrain(covar_y_in__, n_y, lp__),
          "assigning variable covar_y");
      } else {
        current_statement__ = 2;
        assign(covar_y, nil_index_list(),
          stan::math::cov_matrix_constrain(covar_y_in__, n_y),
          "assigning variable covar_y");
      }
      {
        current_statement__ = 3;
        validate_non_negative_index("L_covar_y", "n_y", n_y);
        current_statement__ = 4;
        validate_non_negative_index("L_covar_y", "n_y", n_y);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_covar_y;
        L_covar_y = Eigen::Matrix<local_scalar_t__, -1, -1>(n_y, n_y);
        stan::math::fill(L_covar_y, DUMMY_VAR__);
        
        current_statement__ = 5;
        assign(L_covar_y, nil_index_list(), cholesky_decompose(covar_y),
          "assigning variable L_covar_y");
        current_statement__ = 6;
        validate_non_negative_index("mean_y", "n_s", n_s);
        current_statement__ = 7;
        validate_non_negative_index("mean_y", "n_y", n_y);
        Eigen::Matrix<local_scalar_t__, -1, -1> mean_y;
        mean_y = Eigen::Matrix<local_scalar_t__, -1, -1>(n_s, n_y);
        stan::math::fill(mean_y, DUMMY_VAR__);
        
        current_statement__ = 8;
        assign(mean_y, nil_index_list(), multiply(x, regr),
          "assigning variable mean_y");
        current_statement__ = 10;
        for (int yi = 1; yi <= n_y; ++yi) {
          current_statement__ = 9;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(regr,
                cons_list(index_omni(),
                  cons_list(index_uni(yi), nil_index_list())), "regr"), 0,
              (1 / stan::math::sqrt(regr_prec))));}
        current_statement__ = 11;
        lp_accum__.add(
          inv_wishart_lpdf<propto__>(covar_y, covar_y_df, covar_y_scale));
        current_statement__ = 13;
        for (int ii = 1; ii <= n_s; ++ii) {
          current_statement__ = 12;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(y,
                cons_list(index_uni(ii),
                  cons_list(index_omni(), nil_index_list())), "y"),
              rvalue(mean_y,
                cons_list(index_uni(ii),
                  cons_list(index_omni(), nil_index_list())), "mean_y"),
              L_covar_y));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_bmnr_mvnorm_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> regr;
      regr = Eigen::Matrix<double, -1, -1>(n_x, n_y);
      stan::math::fill(regr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      regr = in__.matrix(n_x, n_y);
      Eigen::Matrix<double, -1, -1> covar_y;
      covar_y = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> covar_y_in__;
      covar_y_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((n_y +
                                                              ((n_y *
                                                                 (n_y - 1)) /
                                                                2)));
      stan::math::fill(covar_y_in__, DUMMY_VAR__);
      
      current_statement__ = 2;
      covar_y_in__ = in__.vector((n_y + ((n_y * (n_y - 1)) / 2)));
      current_statement__ = 2;
      assign(covar_y, nil_index_list(),
        stan::math::cov_matrix_constrain(covar_y_in__, n_y),
        "assigning variable covar_y");
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          vars__.emplace_back(
            rvalue(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "regr"));}}
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
          vars__.emplace_back(
            rvalue(covar_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "covar_y"));
        }}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> regr;
      regr = Eigen::Matrix<double, -1, -1>(n_x, n_y);
      stan::math::fill(regr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> regr_flat__;
        current_statement__ = 1;
        assign(regr_flat__, nil_index_list(), context__.vals_r("regr"),
          "assigning variable regr_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
            current_statement__ = 1;
            assign(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              regr_flat__[(pos__ - 1)], "assigning variable regr");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> covar_y;
      covar_y = Eigen::Matrix<double, -1, -1>(n_y, n_y);
      stan::math::fill(covar_y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> covar_y_flat__;
        current_statement__ = 2;
        assign(covar_y_flat__, nil_index_list(), context__.vals_r("covar_y"),
          "assigning variable covar_y_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
            current_statement__ = 2;
            assign(covar_y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              covar_y_flat__[(pos__ - 1)], "assigning variable covar_y");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> covar_y_free__;
      covar_y_free__ = Eigen::Matrix<double, -1, 1>((n_y +
                                                      ((n_y * (n_y - 1)) / 2)));
      stan::math::fill(covar_y_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(covar_y_free__, nil_index_list(),
        stan::math::cov_matrix_free(covar_y),
        "assigning variable covar_y_free__");
      for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          vars__.emplace_back(
            rvalue(regr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "regr"));}}
      for (int sym1__ = 1; sym1__ <= (n_y + ((n_y * (n_y - 1)) / 2));
           ++sym1__) { vars__.emplace_back(covar_y_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("regr");
    names__.emplace_back("covar_y");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_x),
                                             static_cast<size_t>(n_y)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_y),
                                             static_cast<size_t>(n_y)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "regr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_y; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "covar_y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_y; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_x; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "regr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= (n_y + ((n_y * (n_y - 1)) / 2)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "covar_y" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"regr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_x << ",\"cols\":" << n_y << "},\"block\":\"parameters\"},{\"name\":\"covar_y\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_y << ",\"cols\":" << n_y << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"regr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_x << ",\"cols\":" << n_y << "},\"block\":\"parameters\"},{\"name\":\"covar_y\",\"type\":{\"name\":\"vector\",\"length\":" << (n_y + ((n_y * (n_y - 1)) / 2)) << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_bmnr_mvnorm_namespace::model_bmnr_mvnorm;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_bmnr_mvnorm_namespace::profiles__;
}
#endif
#endif
